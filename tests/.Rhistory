source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
    gg = gGraph$new(nodes = nodes1, edges = edges)         
bla(gg, TRUE)
bla(gg, FALSE)
bla(gg, 1)
gg$nodes[1]
gg$nodes[1]
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
gg$nodes[1]
inew
inew
inew
txt
paste0("nodes$dt[,", txt, ", with = TRUE]
)
paste0("nodes$dt[,", txt, ", with = TRUE]")
nodes$dt[,1, with = TRUE]
nodes$dt[,1:@, with = TRUE]
nodes$dt[,1:2, with = TRUE]
nodes$dt[,1:2, with = FALSE]
nodes$dt[,eval(1:2), with = TRUE]
Q
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
    gg = gGraph$new(nodes = nodes1, edges = edges)         
gg$nodes[1]
c
gg$nodes[1]
txt
paste0("nodes$dt[eval(,", txt, "), with = TRUE]")
inew
Q
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
    gg = gGraph$new(nodes = nodes1, edges = edges)         
gg$nodes[1]
c
gg$nodes[-1]
c
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
gg$nodes[1]
gg$nodes[-1]
gg$nodes[loose.left == TRUE]
gg$nodes[loose.left == FALSE]
bla(gg, 1)
bla(gg, TRUE)
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
    gg = gGraph$new(nodes = nodes1, edges = edges)         
gg$edges
gg$edges[type == "ALT"]
gg$edges[n1.side == 'right']
bla = function(gg, cool) gg$edges[which(n1.side==cool), ]
bla(gg, 'right')
bla(gg, 'left')
gg[1, 1:3]
bla = function(gg, cool, cool2) gg[loose.left == cool, type == cool2]
bla(gg, TRUE, 'right'))
bla(gg, TRUE, 'right')
bla = function(gg, cool, cool2) gg$edges[type == cool2]
bla(gg, TRUE, 'right')
bla = function(gg, cool, cool2) gg[loose.left == cool, type == cool2]
bla(gg, TRUE, 'right')
bla = function(gg, cool, cool2) gg[loose.left == cool, ])
bla = function(gg, cool, cool2) gg[loose.left == cool, ])
bla = function(gg, cool, cool2) gg[loose.left == cool, ]
bla(gg, TRUE, 'right')
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
bla = function(gg, cool, cool2) gg[loose.left == cool, ]
bla = function(gg, cool, cool2) gg[loose.left == cool, type == cool2]
    gg = gGraph$new(nodes = nodes1, edges = edges)         
bla = function(gg, cool, cool2) gg[loose.left == cool, ]
bla(gg, TRUE, 'right')
    gg = gGraph$new(nodes = nodes1, edges = edges)         
bla(gg, TRUE, 'right')
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
bla(gg, TRUE, 'right')
(deparse(substitute(j)) != "NULL")
i
i
substitutE(i)
substitute(i)
substitute(i, parent.frame())
parent.frame()
ls(parent.frame())
Q
bla = function(gg, cool) gg$edges[which(n1.side==cool), ]
bla(gg, 'right')
bla2 = function(gg, cool) bla(gg, cool)
bla2(gg, 'right')
bla(gg, 'right')
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
    gg = gGraph$new(nodes = nodes1, edges = edges)         
bla(gg, 'right')
bla2(gg, 'right')
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
    gg = gGraph$new(nodes = nodes1, edges = edges)         
bla2(gg, 'right')
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
    gg = gGraph$new(nodes = nodes1, edges = edges)         
bla2(gg, 'right')
i
txt
substitute(i, parent.frame())
substitute(deparse(substitute(i)), parent.frame())
substitute(deparse(substitute(i)), parent.frame(2))
substitute(deparse(substitute(i)), parent.frame(3))
txt
  txt = deparse(eval(parse(text = substitute(i), parent.frame()))
  txt = deparse(eval(parse(text = substitute(i), parent.frame())))
txt
txt
deparse(txt)
parse(txt)
parse(text = txt)
eval(parse(text = txt), parent.frame(1))
eval(parse(text = txt), parent.frame(2))
eval_bare
pryr::eval_bare
rlang::eval_bare
caller_env
rlang::caller_env()
ls(rlang::caller_env())
ls(rlang::caller_env())$cool
rlang::caller_env()$cool
txt
parent.frame$cool
parent.frame()$cool
txt
txt
txt
 substitute(deparse(substitute(i)))), parent.frame())
 substitute(deparse(substitute(i)))), parent.frame()
 substitute(deparse(substitute(i)))
eval(substitute(deparse(substitute(i))), parent.frame(2))
eval(substitute(deparse(substitute(i))), parent.frame(1))
eval(substitute(deparse(substitute(i))), parent.frame(2))
eval(substitute(deparse(substitute(i))), parent.frame(3))
eval(substitute(deparse(substitute(i))), parent.frame(1:3))
eval(substitute(deparse(substitute(i))), parent.frame(1))
eval(substitute(deparse(substitute(i))), parent.frame(2))
sys.frames()
deparse(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame()))
eval(parse(text = substitute(deparse(substitute(i)))), parent.frame())
eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame()), parent.frame(1))
eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame()), parent.frame(2))
eval(parse(text = txt), parent.frame(2))
eval(parse(text = txt), parent.frame(1))
txt
substitute(deparse(substitute(i)))), parent.frame())
substitute(deparse(substitute(i))))
substitute(deparse(substitute(i)))
class(substitute(deparse(substitute(i))))
class(substitute(deparse(substitute(i))deparse(substitute(i))))
deparse(substitute(i))
class(deparse(substitute(i)))
substitute(txt)
eval(parse(text = substitute(txt)), parent.frame(1))
eval(parse(text = substitute(txt)), parent.frame(2))
substitute(deparse(substitute(i))))
substitute(deparse(substitute(i)))
deparse(substitute(txt))
deparse(txt)
quote(txt)
quote(deparse(txt))
txt
substitute(txt)
parse(text = txt)
substitute(parse(text = txt), parent.frame(2))
substitute(parse(text = txt), parent.frame(1))
parse(text = txt)
eval(parse(text = txt), 'txt')
eval(parse(text = txt), parent.frame())
eval(parse(text = txt), nodes$dt)
eval(parse(text = txt), edges$dt)
eval(parse(text = txt), c(edges$dt, parent.frame(2)))
eval(parse(text = txt), c(edges$dt, parent.frame(1)))
eval(parse(text = txt), parent.frame(1)
eval(parse(text = txt), parent.frame(1))
sys.frames()
eval(parse(text = txt), sys.frames())
c(as.list(nodes$dt), sys.frames())
c(as.list(edgges$dt), sys.frames())
c(as.list(edges$dt), sys.frames())
eval(i, c(as.list(edges$dt), sys.frames()))
txt
sys.frame
sys.frames()
txt
txt
allenv = lapply(rev(sys.frames()), as.list())
rev(sys.frames())
sys.frames()[[1]]
as.list(sys.frames()[[1]])
allenv = lapply(rev(sys.frames()), as.list)
allenv = do.call(c, lapply(rev(sys.frames()), as.list))
sys.frames(1)[[4]]
sys.frames()[[4]]
as.list(sys.frames()[[4]])
as.list(sys.frames()[[3]])
as.list(sys.frames()[[2]])
as.list(sys.frames()[[1]])
sys.parents()
sys.frame(-1)
sys.frame(-2)
sys.frame(-3)
sys.frame(-4)
sys.frame()
sys.frames()
)
txt
  eval(parse(text = substitute(deparse(substitute(i)))), nodes$dt, parent.frame())
  eval(parse(text = substitute(deparse(substitute(i)))), edges$dt, parent.frame())
  eval(parse(text = substitute(deparse(substitute(i)))), edges$dt)
  eval(parse(text = i, edges$dt)
  eval(parse(text = i, edges$dt))
  eval(parse(text = substitute(deparse(substitute(i)))), edges$dt)
eval(eval(parse(text = substitute(deparse(substitute(i)))), edges$dt), parent.frame())
Q
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
    gg = gGraph$new(nodes = nodes1, edges = edges)         
gg$edges[1]
gg$edges[1:5]
gg$edges[20]
gg$edges[n1.side == 'right']
gg$edges[n2.side == 'right']
bla(gg, 'right')
bla2(gg, 'right')
bla3 = function(gg, cool) bla2(gg, cool)
bla3(gg, 'right')
bla3(gg, 'left')
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
    gg = gGraph$new(nodes = nodes1, edges = edges)         
bla = function(gg, cool, cool2) gg[loose.left == cool, type == cool2]
bla(gg, TRUE, 'right')
c
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
bla(gg, TRUE, 'right')
i
obj$nodes
obj$nodes[1]
substitute(i)
obj$nodes[loose.left == cool]
cool
eval(obj$nodes[loose.left == cool])
eval(obj$nodes[loose.left == cool], parent.frame())
eval(obj$nodes[loose.left == cool], parent.frame(2))
eval(obj$nodes[loose.left == cool], parent.frame(3))
eval(obj$nodes[loose.left == cool], enclos = parent.frame(3))
eval(obj$nodes[loose.left == cool], enclos = parent.frame(2))
j
deparse(substitute(j))
Q
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
    gg = gGraph$new(nodes = nodes1, edges = edges)         
gg[loose.left == TRUE, n1.side == 'right']
c
gg$edges[n1.side == 'left']
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
    gg = gGraph$new(nodes = nodes1, edges = edges)         
gg$edges[n1.side == 'left']
inew
c
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
    gg = gGraph$new(nodes = nodes1, edges = edges)         
gg$edges[n1.side == 'left']
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
    gg = gGraph$new(nodes = nodes1, edges = edges)         
gg$[, n1.side == 'left']
gg[, n1.side == 'left']
edges$dt
eval(parse(text = substitute(deparse(substitute(i)))), parent.frame())
eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame()), nodes$dt)
eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame()), edges$dt)
eval(parse(text = substitute(deparse(substitute(i)))), edges$dt)
inew
eval(eval(i, edges$dt), parent.frame())
eval(eval(i, parent.frame()), edges$dt)
inew
Q
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
    gg = gGraph$new(nodes = nodes1, edges = edges)         
gg[, n1.side == 'left']
gg$edges[1]
gg$edges[n1.side == 'left']
gg$edges[n2.side == 'left']
bla3(gg, 'left')
inew
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
    gg = gGraph$new(nodes = nodes1, edges = edges)         
bla3(gg, 'left')
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
    gg = gGraph$new(nodes = nodes1, edges = edges)         
bla3(gg, 'left')
inew
inew
i
substitute(i)
deparse(substitute(i))
eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame()),edges$dt)
eval(parse(text = substitute(deparse(substitute(i)))), parent.frame())
eval(parse(text = substitute(deparse(substitute(i)))), edges$dt)
eval(eval(parse(text = substitute(deparse(substitute(i)))), edges$dt), parent.frame())
eval(eval(parse(text = substitute(deparse(substitute(i)))), edges$dt), parent.frame(2))
eval(parse(text = substitute(deparse(substitute(i)))), edges$dt)
eval(parse(text = substitute(deparse(substitute(i)))), parent.frame())
inew
parse(text = substitute(deparse(substitute(i)))
)
parse(text = substitute(deparse(substitute(i))))
eval(parse(text = substitute(deparse(substitute(i)))), edges$dt)
eval(parse(text = substitute(deparse(substitute(i)))), parent.frame())
eval(parse(text = substitute(deparse(substitute(i)))), parent.frame(2))
eval(parse(text = substitute(deparse(substitute(i)))), parent.frame(3))
eval(parse(text = substitute(deparse(substitute(i)))), parent.frame(1))
eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame(1)), parent.frame(2))
eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame(1)), parent.frame(3))
eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame(1)), parent.frame(4))
eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame(1)), parent.frame(3))
eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame(1)), parent.frame(2))
sys.frames()
lapply(sys.frames(), as.list)
lapply(sys.frames()[1:4], as.list)
lapply(sys.frames()[1:4], as.list)
sapply(sys.frames(), length)
ix = sapply(sys.frames(), length)
sys.frames()[ix>0]
lapply(rev(sys.frames()[ix>0]), as.list)
sys.frames()[ix>0][1]
as.list(sys.frames()[ix>0][1])
as.list(sys.frames()[ix>0][[1]])
as.list(sys.frames()[ix>0][[2]])
as.list(sys.frames()[ix>0][[3]])
as.list(sys.frames()[ix>0][[4]])
as.list(sys.frames()[ix>0][[5]])
sys.frames()[ix>0][5]
ls(sys.frames()[ix>0][[5]])
as.list(sys.frames()[ix>0][[5]])
list(sys.frames()[ix>0][[5]])
as.list(sys.frames()[ix>0][[5]])
  inew = eval(eval(parse(text = substitute(deparse(substitute(i)))), edges$dt), parent.frame())
  inew = eval(eval(parse(text = substitute(deparse(substitute(i)))), edges$dt), parent.frame(2))
  inew = eval(eval(parse(text = substitute(deparse(substitute(i)))), edges$dt), parent.frame())
Q
bla2(gg, 'right')
c
bla(gg, 'right')
c
inew
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
    gg = gGraph$new(nodes = nodes1, edges = edges)         
bla(gg, 'left')
inew
eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame()),edges$dt
)
inew = eval(eval(parse(text = substitute(deparse(substitute(i)))), edges$dt), parent.frame())
Q
bla(gg, 'left')
inew
eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame()),edges$dt
)
substitute(i)
Q
bla = function(gg, cool) gg$edges[which(n1.side==cool), ]
bla(gg, 'right')
c
bla2(gg, 'right')
c
bla3(gg, 'right')
c
shite = 'right'
bla3(gg, shite)
c
bla = function(gg, cool, cool2) gg[loose.left == cool, type == cool2]
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
bla = function(gg, cool, cool2) gg[loose.left == cool, type == cool2]
bla(gg, TRUE, 'right')
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
    gg = gGraph$new(nodes = nodes1, edges = edges)         
bla(gg, TRUE, 'right')
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
    gg = gGraph$new(nodes = nodes1, edges = edges)         
bla(gg, TRUE, 'right')
inew
eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame()),edges$dt)
eval(parse(text = substitute(deparse(substitute(i)))), edges$dt)
eval(parse(text = substitute(deparse(substitute(i)))), parent.frame())
eval(parse(text = substitute(deparse(substitute(i)))), parent.frame(2))
eval(parse(text = substitute(deparse(substitute(i)))), parent.frame(1))
eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame(1)), parent.frame(2))
type
eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame()),edges$dt)
eval(parse(text = substitute(deparse(substitute(i)))), parent.frame())
eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame()), parent.frame(2)
eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame()), parent.frame(2))
parent.frame()$j
parent.frame()$j
ls(parent.frame())
ls(parent.frame(2))
parent.frame(2)$cool2
eval(eval(parse(text = substitute(deparse(substitute(i))))
)
)
eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame()),edges$dt)
eval(parse(text = substitute(deparse(substitute(i)))), parent.frame())
eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame()), parent.frame(2))
eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame()), nodes$dt)
eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame()), edges$dt)
eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame()),edges$dt)
eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame()),edges$dt, parent.frame())
eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame()),edges$dt, parent.frame(2))
eval
baseenv()
eval(i, edges$dt, parent.frame(2))
eval(i, edges$dt, parent.frame())
inew
Q
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
    gg = gGraph$new(nodes = nodes1, edges = edges)         
bla(gg, TRUE, 'right')
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
    gg = gGraph$new(nodes = nodes1, edges = edges)         
bla(gg, TRUE, 'right')
eval(parse(text = substitute(deparse(substitute(i)))), edges$dt)
eval(parse(text = substitute(deparse(substitute(i)))), parent.frame())
Q
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
    gg = gGraph$new(nodes = nodes1, edges = edges)         
bla = function(gg, cool) gg$nodes[which(loose.right==cool), ]
bla(gg, 'TRUE)
bla(gg, TRUE)
inew
inew = eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame(), nodes$dt))
inew = eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame()), nodes$dt))
inew = eval(eval(parse(text = substitute(deparse(substitute(i)))), parent.frame()), nodes$dt)
inew
Q
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
bla(gg, TRUE)
bla3(gg, TRUE)
bla2(gg, TRUE)
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
bla = function(gg, cool) gg$nodes[which(loose.right==cool), ]
bla(gg, TRUE)
bla = function(gg, cool, cool2) gg[loose.left == cool, type == cool2]
bla(gg, TRUE, 'right')
bla(gg, TRUE, 'left')
bla3(gg, TRUE, 'left')
bla3 = function(gg, cool, cool2) bla2(gg, cool, cool2)
bla2 = function(gg, cool, shite2) bla(gg, cool, shite2)
bla3(gg, TRUE, 'left')
shite2(gg, TRUE, 'left')
bla2(gg, TRUE, 'left')
bla3(gg, TRUE, 'left')
bla3(gg, TRUE, 'right')
bla3(gg, FALSE, 'right')
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
gw
walks.grl
 walks.grl = readRDS(system.file('extdata', 'walks.grl.rds', package = "gGnome"))
gw = gW(grl = walks.grl, disjoin = TRUE)
gw
gw[wid>2]
bla = function(gg, cool) gg[cool]
bla2 = function(gg, cool) bla(gg, cool)
bla3 = function(gg, cool, cool2) bla2(gg, cool, cool2)
bla2(gw, wid>2)
gw[wid>2]
bla = function(gg, cool) gg[wid>cool]
bla2(gw, 2)
bla = function(gg, cool) gg[cool]
gw[wid>2]
bla2(gw, 2)
bla2(gw, wid>2)
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
gw = gW(grl = walks.grl, disjoin = TRUE)
bla2(gw, wid>2)
inew
i
 eval(parse(text = substitute(deparse(substitute(i)))), obj$dts(makelists = FALSE)
 eval(parse(text = substitute(deparse(substitute(i)))), obj$dts(makelists = FALSE))
 eval(parse(text = substitute(deparse(substitute(i)))), parent.frame(), parent.frame(2))
 eval(parse(text = substitute(deparse(substitute(i)))), parent.frame(), parent.frame32))
 eval(parse(text = substitute(deparse(substitute(i)))), parent.frame(), parent.frame(3))
 eval(parse(text = substitute(deparse(substitute(i)))), parent.frame(), parent.frame43))
 eval(parse(text = substitute(deparse(substitute(i)))), parent.frame(), parent.frame(4))
 eval(parse(text = substitute(deparse(substitute(i)))), parent.frame(), parent.frame(5))
 eval(parse(text = substitute(deparse(substitute(i)))), parent.frame())
 eval(parse(text = substitute(deparse(substitute(i)))), parent.frame(2))
Q
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
gw = gW(grl = walks.grl, disjoin = TRUE)
source('~/git/mskilab/gGnome/R/converters.R'); source('~/git/mskilab/gGnome/R/eventCallers.R'); source('~/git/mskilab/gGnome/R/gGnome.R'); source('~/git/mskilab/gGnome/R/utils.R');
    gg = gGraph$new(nodes = nodes1, edges = edges)         
gg$junctions
gg$junctions[edge.id>2]
gg$junctions[from<4]]
gg$junctions[from<4]
q()
n
source("/gpfs/commons/groups/imielinski_lab/home/sclarke/git/GxG_fix/tests/testthat.R")
